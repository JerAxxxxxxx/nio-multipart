<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
        <stringProp name="cacheKey"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import java.security.MessageDigest;
import org.apache.commons.codec.binary.Base64;
import javax.activation.MimetypesFileTypeMap;

// To compute the mime...
MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();

// To computhe the hash...
char[] hexDigits = &quot;0123456789abcdef&quot;.toCharArray();

// The folder containing the file parts...
File folder = new File(props.get(&quot;files.folder&quot;));

// Remove the main json part if there...
File request = new File(folder, &quot;request.json&quot;);
if (request.exists()){
	request.delete();
}

// Get the list of all parts...
File[] listOfFiles = folder.listFiles();
StringBuilder requestSb = new StringBuilder();
requestSb.append(&quot;{\n\&quot;filesMetadata\&quot;: [&quot;);

// Computhe hash and size for each file
for(int i=0; i &lt; listOfFiles.length; i++){

	File file = listOfFiles[i];

	// Size
	long size = file.length();

	// Sha256
	String sha256;
	MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;);
	FileInputStream fis = null;
	try{
		fis = new FileInputStream(file);
		byte[] buffer = new byte[1024];
		int read;
		while(-1 != (read = fis.read(buffer))){
			md.update(buffer, 0, read);
		}
		byte[] digest = md.digest();
		StringBuilder sb = new StringBuilder(2 * digest.length);
        	for (byte b : digest) {
            	sb.append(hexDigits[(b &gt;&gt; 4) &amp; 0xf]).append(hexDigits[b &amp; 0xf]);
        	}
        	sha256 = sb.toString();
	}finally{
		if (fis != null){
			fis.close();
		}
	}

	//log.info(&quot;---------------&quot;);
	//log.info(&quot;File: &quot; + file.getAbsolutePath());
	//log.info(&quot;size: &quot; + size);
	//log.info(&quot;sha256: &quot; + sha256);
	//log.info(&quot;---------------&quot;);

     requestSb.append(&quot;{\n&quot;);
	requestSb.append(&quot;\&quot;file\&quot;: \&quot;&quot;).append(file.getAbsolutePath()).append(&quot;\&quot;,&quot;);
	requestSb.append(&quot;\n&quot;);
	requestSb.append(&quot;\&quot;size\&quot;: &quot;).append(size).append(&quot;,&quot;);
	requestSb.append(&quot;\n&quot;);
	requestSb.append(&quot;\&quot;checksum\&quot;: \&quot;&quot;).append(sha256).append(&quot;\&quot;&quot;);
	requestSb.append(&quot;\n&quot;);
	requestSb.append(&quot;}&quot;);
	if (i != listOfFiles.length -1){
		requestSb.append(&quot;,\n&quot;);
	}

	String mimeType = mimeTypesMap.getContentType(file);
	props.put(&quot;part_&quot; + i, file.getAbsolutePath());
	props.put(&quot;mime_&quot; + i, mimeTypesMap.getContentType(file));
	props.put(&quot;name_&quot; + i, file.getName());
	
}
requestSb.append(&quot;]}&quot;);

// Save main body to file
BufferedWriter writer = null;
try{
	writer = new BufferedWriter( new FileWriter(request));
	writer.write(requestSb.toString());
}finally{
	if ( writer != null){
		writer.close( );
	}
}

props.put(&quot;part_main&quot;, request.getAbsolutePath());
props.put(&quot;mime_main&quot;, &quot;application/json&quot;);
props.put(&quot;name_main&quot;, &quot;metadata&quot;);</stringProp>
        <stringProp name="scriptLanguage">java</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446117314000</longProp>
        <longProp name="ThreadGroup.end_time">1446117314000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request NIO" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">http://localhost:8080/example-webapp/nio/multipart</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${__P(part_main)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_main)}</stringProp>
                <stringProp name="File.paramname">${__P(name_main)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_main)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_0)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_0)}</stringProp>
                <stringProp name="File.paramname">${__P(name_0)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_0)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_1)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_1)}</stringProp>
                <stringProp name="File.paramname">${__P(name_1)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_1)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_2)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_2)}</stringProp>
                <stringProp name="File.paramname">${__P(name_2)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_2)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_3)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_3)}</stringProp>
                <stringProp name="File.paramname">${__P(name_3)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_3)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_4)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_4)}</stringProp>
                <stringProp name="File.paramname">${__P(name_4)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_4)}</stringProp>
              </elementProp>
              <elementProp name="${__P(part_5)}" elementType="HTTPFileArg">
                <stringProp name="File.path">${__P(part_5)}</stringProp>
                <stringProp name="File.paramname">${__P(name_5)}</stringProp>
                <stringProp name="File.mimetype">${__P(mime_5)}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
